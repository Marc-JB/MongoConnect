name: Node.js deployment

on:
  push:
    branches: [ dev ]

jobs:
  #lint-and-test:
    #runs-on: ubuntu-latest

    #strategy:
    #  matrix:
    #    node-version: [10.x, 12.x, 14.x]

    #steps:
      # Checkout
      #- name: Checkout repository
      #  uses: actions/checkout@v2

      # Set up Node.js
      #- name: Use Node.js ${{ matrix.node-version }}
      #  uses: actions/setup-node@v1
      #  with:
      #    node-version: ${{ matrix.node-version }}

      # Cache
      #- name: Get yarn cache directory path
      #  id: yarn-cache-dir-path
      #  run: echo "::set-output name=dir::$(yarn cache dir)"

      #- uses: actions/cache@v2
      #  id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #  with:
      #    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #    restore-keys: ${{ runner.os }}-yarn-

      # Install dependencies
      #- name: Install dependencies
      #  run: yarn install --frozen-lockfile

      # Lint
      #- name: Lint project
      #  run: yarn lint

      # Build
      #- name: Build project
      #  run: yarn build

      # Test
      #- name: Test project
      #  run: yarn test

  publish-npm:
    #needs: lint-and-test
    runs-on: ubuntu-latest
    steps:

      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: 'https://marc-b:${{secrets.NPM_TOKEN}}@registry.npmjs.org'
          scope: '@peregrine'
          always-auth: true

      # Cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      # Install dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build
      - name: Build project
        run: yarn build

      # Publish
      - name: Change scope
        run: yarn config set scope "@peregrine"

      - name: Change package registry
        run: yarn config set registry https://marc-b:${{secrets.NPM_TOKEN}}@registry.npmjs.org

      - name: Publish project to npm
        run: yarn publish --verbose --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  publish-gpr:
    #needs: lint-and-test
    runs-on: ubuntu-latest
    steps:

      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://marc-jb:${{secrets.GITHUB_TOKEN}}@npm.pkg.github.com/
          scope: 'marc-jb'
          always-auth: true

      # Cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      # Install dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build
      - name: Build project
        run: yarn build

      # Publish
      - name: Change scope
        run: yarn config set scope "@marc-jb"

      - name: Change package registry
        run: yarn config set registry https://marc-jb:${{secrets.GITHUB_TOKEN}}@npm.pkg.github.com/

      - name: Publish project to GitHub Packages
        run: yarn publish --verbose --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
